{"ast":null,"code":"let currentGameSessionId = null;\nfunction getCSRFToken() {\n  const cookieValue = document.cookie.match('(^|;)\\\\s*csrftoken\\\\s*=\\\\s*([^;]+)');\n  return cookieValue ? cookieValue.pop() : '';\n}\nfunction createNewGameSession() {\n  const baseUrl = window.location.origin;\n  const apiUrl = `${baseUrl}/api/game-session/create/`;\n  const payload = {\n    game: 1,\n    player: 1,\n    arcade: 1\n  };\n  const csrfToken = getCSRFToken();\n  fetch(apiUrl, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'X-CSRFToken': csrfToken\n    },\n    body: JSON.stringify(payload)\n  }).then(response => response.json()).then(data => {\n    console.log('Game session created:', data);\n    if (data.game_session_id) {\n      currentGameSessionId = data.game_session_id;\n    } else {\n      console.error('Game session creation response does not contain an ID.');\n    }\n  }).catch(error => {\n    console.error('Error creating game session:', error);\n  });\n}\nfunction updateGameSession(holeNumber, loopNumber, holeScore) {\n  if (!currentGameSessionId) {\n    console.error('Game session ID is not available. Cannot update hole scores.');\n    return;\n  }\n  const baseUrl = window.location.origin;\n  const apiUrl = `${baseUrl}/api/game-session/${currentGameSessionId}/loop/${loopNumber}/hole/${holeNumber}/update-score/`;\n  const payload = {\n    hole_score: holeScore\n  };\n  const csrfToken = getCSRFToken();\n  fetch(apiUrl, {\n    method: 'PATCH',\n    headers: {\n      'Content-Type': 'application/json',\n      'X-CSRFToken': csrfToken\n    },\n    body: JSON.stringify(payload)\n  }).then(response => response.json()).then(data => {\n    console.log('Hole score updated:', data);\n  }).catch(error => {\n    console.error('Error updating hole score:', error);\n  });\n}","map":{"version":3,"names":["currentGameSessionId","getCSRFToken","cookieValue","document","cookie","match","pop","createNewGameSession","baseUrl","window","location","origin","apiUrl","payload","game","player","arcade","csrfToken","fetch","method","headers","body","JSON","stringify","then","response","json","data","console","log","game_session_id","error","catch","updateGameSession","holeNumber","loopNumber","holeScore","hole_score"],"sources":["/app/src/utils/api.js"],"sourcesContent":["let currentGameSessionId = null;\n\nfunction getCSRFToken() {\n    const cookieValue = document.cookie.match('(^|;)\\\\s*csrftoken\\\\s*=\\\\s*([^;]+)');\n    return cookieValue ? cookieValue.pop() : '';\n}\n\nfunction createNewGameSession() {\n    const baseUrl = window.location.origin;\n    const apiUrl = `${baseUrl}/api/game-session/create/`;\n\n    const payload = {\n        game: 1,\n        player: 1,\n        arcade: 1\n    };\n\n    const csrfToken = getCSRFToken();\n\n    fetch(apiUrl, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'X-CSRFToken': csrfToken,\n        },\n        body: JSON.stringify(payload),\n    })\n    .then(response => response.json())\n    .then(data => {\n        console.log('Game session created:', data);\n\n        if (data.game_session_id) {\n            currentGameSessionId = data.game_session_id;\n        } else {\n            console.error('Game session creation response does not contain an ID.');\n        }\n    })\n    .catch(error => {\n        console.error('Error creating game session:', error);\n    });\n}\n\nfunction updateGameSession(holeNumber, loopNumber, holeScore) {\n    if (!currentGameSessionId) {\n        console.error('Game session ID is not available. Cannot update hole scores.');\n        return;\n    }\n\n    const baseUrl = window.location.origin;\n    const apiUrl = `${baseUrl}/api/game-session/${currentGameSessionId}/loop/${loopNumber}/hole/${holeNumber}/update-score/`;\n\n    const payload = {\n        hole_score: holeScore\n    };\n\n    const csrfToken = getCSRFToken();\n\n    fetch(apiUrl, {\n        method: 'PATCH',\n        headers: {\n            'Content-Type': 'application/json',\n            'X-CSRFToken': csrfToken,\n        },\n        body: JSON.stringify(payload),\n    })\n    .then(response => response.json())\n    .then(data => {\n        console.log('Hole score updated:', data);\n    })\n    .catch(error => {\n        console.error('Error updating hole score:', error);\n    });\n}\n"],"mappings":"AAAA,IAAIA,oBAAoB,GAAG,IAAI;AAE/B,SAASC,YAAYA,CAAA,EAAG;EACpB,MAAMC,WAAW,GAAGC,QAAQ,CAACC,MAAM,CAACC,KAAK,CAAC,oCAAoC,CAAC;EAC/E,OAAOH,WAAW,GAAGA,WAAW,CAACI,GAAG,CAAC,CAAC,GAAG,EAAE;AAC/C;AAEA,SAASC,oBAAoBA,CAAA,EAAG;EAC5B,MAAMC,OAAO,GAAGC,MAAM,CAACC,QAAQ,CAACC,MAAM;EACtC,MAAMC,MAAM,GAAG,GAAGJ,OAAO,2BAA2B;EAEpD,MAAMK,OAAO,GAAG;IACZC,IAAI,EAAE,CAAC;IACPC,MAAM,EAAE,CAAC;IACTC,MAAM,EAAE;EACZ,CAAC;EAED,MAAMC,SAAS,GAAGhB,YAAY,CAAC,CAAC;EAEhCiB,KAAK,CAACN,MAAM,EAAE;IACVO,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACL,cAAc,EAAE,kBAAkB;MAClC,aAAa,EAAEH;IACnB,CAAC;IACDI,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACV,OAAO;EAChC,CAAC,CAAC,CACDW,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAI;IACVC,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEF,IAAI,CAAC;IAE1C,IAAIA,IAAI,CAACG,eAAe,EAAE;MACtB9B,oBAAoB,GAAG2B,IAAI,CAACG,eAAe;IAC/C,CAAC,MAAM;MACHF,OAAO,CAACG,KAAK,CAAC,wDAAwD,CAAC;IAC3E;EACJ,CAAC,CAAC,CACDC,KAAK,CAACD,KAAK,IAAI;IACZH,OAAO,CAACG,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;EACxD,CAAC,CAAC;AACN;AAEA,SAASE,iBAAiBA,CAACC,UAAU,EAAEC,UAAU,EAAEC,SAAS,EAAE;EAC1D,IAAI,CAACpC,oBAAoB,EAAE;IACvB4B,OAAO,CAACG,KAAK,CAAC,8DAA8D,CAAC;IAC7E;EACJ;EAEA,MAAMvB,OAAO,GAAGC,MAAM,CAACC,QAAQ,CAACC,MAAM;EACtC,MAAMC,MAAM,GAAG,GAAGJ,OAAO,qBAAqBR,oBAAoB,SAASmC,UAAU,SAASD,UAAU,gBAAgB;EAExH,MAAMrB,OAAO,GAAG;IACZwB,UAAU,EAAED;EAChB,CAAC;EAED,MAAMnB,SAAS,GAAGhB,YAAY,CAAC,CAAC;EAEhCiB,KAAK,CAACN,MAAM,EAAE;IACVO,MAAM,EAAE,OAAO;IACfC,OAAO,EAAE;MACL,cAAc,EAAE,kBAAkB;MAClC,aAAa,EAAEH;IACnB,CAAC;IACDI,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACV,OAAO;EAChC,CAAC,CAAC,CACDW,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAI;IACVC,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEF,IAAI,CAAC;EAC5C,CAAC,CAAC,CACDK,KAAK,CAACD,KAAK,IAAI;IACZH,OAAO,CAACG,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;EACtD,CAAC,CAAC;AACN","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}