{"ast":null,"code":"let score = 0;\nexport function updateScoreDisplay() {\n  const scoreDisplay = document.getElementById('score-value');\n  if (score < 1000) {\n    scoreDisplay.textContent = score;\n  } else {\n    scoreDisplay.textContent = score.toLocaleString('en-US', {\n      minimumIntegerDigits: 4,\n      useGrouping: true\n    });\n  }\n}\nexport function resetScoreDisplay() {\n  score = 0;\n  updateScoreDisplay();\n}\nexport function stopTimeDisplay() {\n  clearInterval(timerInterval);\n}\nexport function resetTimeDisplay() {\n  clearInterval(timerInterval);\n  elapsedTime = 0;\n  updateTimeDisplay(0, 0, 0); // Initialize the time display to 00:00:00\n}\nexport function updateTimeDisplay(hours, minutes, seconds) {\n  const timeDisplay = document.getElementById('time-value');\n  hours = hours < 10 ? \"0\" + hours : hours;\n  minutes = minutes < 10 ? \"0\" + minutes : minutes;\n  seconds = seconds < 10 ? \"0\" + seconds : seconds;\n  timeDisplay.textContent = hours + \":\" + minutes + \":\" + seconds;\n}\nexport function startStopwatch() {\n  clearInterval(timerInterval); // Clear any existing interval\n  startTime = Date.now() - elapsedTime; // Set startTime to account for elapsed time\n\n  function updateTimer() {\n    elapsedTime = Date.now() - startTime; // Update elapsedTime\n    const hours = Math.floor(elapsedTime / (3600 * 1000));\n    const minutes = Math.floor(elapsedTime % (3600 * 1000) / (60 * 1000));\n    const seconds = Math.floor(elapsedTime % (60 * 1000) / 1000);\n    updateTimeDisplay(hours, minutes, seconds);\n  }\n  updateTimer(); // Update timer immediately\n  timerInterval = setInterval(updateTimer, 1000); // Update every second\n}\nexport function updateBallsValueDisplay(ballValue) {\n  const ballsValueDisplay = document.getElementById('balls-input');\n  ballsValueDisplay.value = ballValue;\n}\nexport function animateScoreIncrement(amount) {\n  let targetScore = score + amount;\n  let incrementSpeed = 0.1; // Increment speed in milliseconds\n\n  function increment() {\n    if (score < targetScore) {\n      score++;\n      updateScoreDisplay();\n      setTimeout(increment, incrementSpeed);\n    } else {\n      score = targetScore; // Ensure the score matches the target precisely\n      updateScoreDisplay();\n    }\n  }\n  increment();\n}\nexport function addHoleScore(holeNumber, holeScore) {\n  gameData.holes[holeNumber] = holeScore;\n}","map":{"version":3,"names":["score","updateScoreDisplay","scoreDisplay","document","getElementById","textContent","toLocaleString","minimumIntegerDigits","useGrouping","resetScoreDisplay","stopTimeDisplay","clearInterval","timerInterval","resetTimeDisplay","elapsedTime","updateTimeDisplay","hours","minutes","seconds","timeDisplay","startStopwatch","startTime","Date","now","updateTimer","Math","floor","setInterval","updateBallsValueDisplay","ballValue","ballsValueDisplay","value","animateScoreIncrement","amount","targetScore","incrementSpeed","increment","setTimeout","addHoleScore","holeNumber","holeScore","gameData","holes"],"sources":["/app/src/utils/helper.js"],"sourcesContent":["let score = 0;\n\n\nexport function updateScoreDisplay() {\n    const scoreDisplay = document.getElementById('score-value');\n    if (score < 1000) {\n        scoreDisplay.textContent = score;\n    } else {\n        scoreDisplay.textContent = score.toLocaleString('en-US', { minimumIntegerDigits: 4, useGrouping: true });\n    }\n}\n\nexport function resetScoreDisplay() {\n    score = 0;\n    updateScoreDisplay();\n}\n\nexport function stopTimeDisplay() {\n    clearInterval(timerInterval);\n}\n\nexport function resetTimeDisplay() {\n    clearInterval(timerInterval);\n    elapsedTime = 0;\n    updateTimeDisplay(0, 0, 0); // Initialize the time display to 00:00:00\n}\n\nexport function updateTimeDisplay(hours, minutes, seconds) {\n    const timeDisplay = document.getElementById('time-value');\n    hours = hours < 10 ? \"0\" + hours : hours;\n    minutes = minutes < 10 ? \"0\" + minutes : minutes;\n    seconds = seconds < 10 ? \"0\" + seconds : seconds;\n    timeDisplay.textContent = hours + \":\" + minutes + \":\" + seconds;\n}\n\nexport function startStopwatch() {\n    clearInterval(timerInterval); // Clear any existing interval\n    startTime = Date.now() - elapsedTime; // Set startTime to account for elapsed time\n\n    function updateTimer() {\n        elapsedTime = Date.now() - startTime; // Update elapsedTime\n        const hours = Math.floor(elapsedTime / (3600 * 1000));\n        const minutes = Math.floor((elapsedTime % (3600 * 1000)) / (60 * 1000));\n        const seconds = Math.floor((elapsedTime % (60 * 1000)) / 1000);\n        updateTimeDisplay(hours, minutes, seconds);\n    }\n\n    updateTimer(); // Update timer immediately\n    timerInterval = setInterval(updateTimer, 1000); // Update every second\n}\n\nexport function updateBallsValueDisplay(ballValue) {\n    const ballsValueDisplay = document.getElementById('balls-input');\n    ballsValueDisplay.value = ballValue;\n}\n\nexport function animateScoreIncrement(amount) {\n    let targetScore = score + amount;\n    let incrementSpeed = 0.1; // Increment speed in milliseconds\n\n    function increment() {\n        if (score < targetScore) {\n            score++;\n            updateScoreDisplay();\n            setTimeout(increment, incrementSpeed);\n        } else {\n            score = targetScore; // Ensure the score matches the target precisely\n            updateScoreDisplay();\n        }\n    }\n\n    increment();\n}\n\nexport function addHoleScore(holeNumber, holeScore) {\n    gameData.holes[holeNumber] = holeScore;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}