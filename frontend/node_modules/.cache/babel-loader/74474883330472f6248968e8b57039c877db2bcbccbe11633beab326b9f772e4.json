{"ast":null,"code":"// A utility function to capitalize the first letter of a string\nexport function capitalizeFirstLetter(string) {\n  if (typeof string !== 'string') {\n    return '';\n  }\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\nexport function updateScoreDisplay(score) {\n  const scoreDisplay = document.getElementById('score-value');\n  if (score < 1000) {\n    scoreDisplay.textContent = score;\n  } else {\n    scoreDisplay.textContent = score.toLocaleString('en-US', {\n      minimumIntegerDigits: 4,\n      useGrouping: true\n    });\n  }\n}\nexport function formatNumberWithCommas(number) {\n  return number.toLocaleString('en-US');\n}\nexport function resetScoreDisplay(score) {\n  score = 0;\n  updateScoreDisplay(score);\n}\nexport function stopTimeDisplay(timerInterval) {\n  clearInterval(timerInterval);\n}\nexport function resetTimeDisplay(timerInterval, updateTimeDisplay) {\n  clearInterval(timerInterval);\n  const elapsedTime = 0;\n  updateTimeDisplay(0, 0, 0); // Initialize the time display to 00:00:00\n  return elapsedTime;\n}\nexport function updateTimeDisplay(hours, minutes, seconds) {\n  const timeDisplay = document.getElementById('time-value');\n  hours = hours < 10 ? \"0\" + hours : hours;\n  minutes = minutes < 10 ? \"0\" + minutes : minutes;\n  seconds = seconds < 10 ? \"0\" + seconds : seconds;\n  timeDisplay.textContent = hours + \":\" + minutes + \":\" + seconds;\n}\nexport function startStopwatch(timerInterval, elapsedTime, updateTimeDisplay) {\n  clearInterval(timerInterval); // Clear any existing interval\n  const startTime = Date.now() - elapsedTime; // Set startTime to account for elapsed time\n\n  function updateTimer() {\n    const elapsedTime = Date.now() - startTime; // Update elapsedTime\n    const hours = Math.floor(elapsedTime / (3600 * 1000));\n    const minutes = Math.floor(elapsedTime % (3600 * 1000) / (60 * 1000));\n    const seconds = Math.floor(elapsedTime % (60 * 1000) / 1000);\n    updateTimeDisplay(hours, minutes, seconds);\n  }\n  updateTimer(); // Update timer immediately\n  timerInterval = setInterval(updateTimer, 1000); // Update every second\n  return {\n    timerInterval,\n    startTime\n  };\n}","map":{"version":3,"names":["capitalizeFirstLetter","string","charAt","toUpperCase","slice","updateScoreDisplay","score","scoreDisplay","document","getElementById","textContent","toLocaleString","minimumIntegerDigits","useGrouping","formatNumberWithCommas","number","resetScoreDisplay","stopTimeDisplay","timerInterval","clearInterval","resetTimeDisplay","updateTimeDisplay","elapsedTime","hours","minutes","seconds","timeDisplay","startStopwatch","startTime","Date","now","updateTimer","Math","floor","setInterval"],"sources":["/app/src/utils/helper.js"],"sourcesContent":["// A utility function to capitalize the first letter of a string\nexport function capitalizeFirstLetter(string) {\n    if (typeof string !== 'string') {\n        return '';\n    }\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nexport function updateScoreDisplay(score) {\n    const scoreDisplay = document.getElementById('score-value');\n    if (score < 1000) {\n        scoreDisplay.textContent = score;\n    } else {\n        scoreDisplay.textContent = score.toLocaleString('en-US', { minimumIntegerDigits: 4, useGrouping: true });\n    }\n}\n\nexport function formatNumberWithCommas(number) {\n    return number.toLocaleString('en-US');\n}\n\nexport function resetScoreDisplay(score) {\n    score = 0;\n    updateScoreDisplay(score);\n}\n\nexport function stopTimeDisplay(timerInterval) {\n    clearInterval(timerInterval);\n}\n\nexport function resetTimeDisplay(timerInterval, updateTimeDisplay) {\n    clearInterval(timerInterval);\n    const elapsedTime = 0;\n    updateTimeDisplay(0, 0, 0); // Initialize the time display to 00:00:00\n    return elapsedTime;\n}\n\nexport function updateTimeDisplay(hours, minutes, seconds) {\n    const timeDisplay = document.getElementById('time-value');\n    hours = hours < 10 ? \"0\" + hours : hours;\n    minutes = minutes < 10 ? \"0\" + minutes : minutes;\n    seconds = seconds < 10 ? \"0\" + seconds : seconds;\n    timeDisplay.textContent = hours + \":\" + minutes + \":\" + seconds;\n}\n\nexport function startStopwatch(timerInterval, elapsedTime, updateTimeDisplay) {\n    clearInterval(timerInterval); // Clear any existing interval\n    const startTime = Date.now() - elapsedTime; // Set startTime to account for elapsed time\n\n    function updateTimer() {\n        const elapsedTime = Date.now() - startTime; // Update elapsedTime\n        const hours = Math.floor(elapsedTime / (3600 * 1000));\n        const minutes = Math.floor((elapsedTime % (3600 * 1000)) / (60 * 1000));\n        const seconds = Math.floor((elapsedTime % (60 * 1000)) / 1000);\n        updateTimeDisplay(hours, minutes, seconds);\n    }\n\n    updateTimer(); // Update timer immediately\n    timerInterval = setInterval(updateTimer, 1000); // Update every second\n    return { timerInterval, startTime };\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}