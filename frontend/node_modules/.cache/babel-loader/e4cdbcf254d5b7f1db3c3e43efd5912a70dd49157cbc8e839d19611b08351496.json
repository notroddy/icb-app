{"ast":null,"code":"let score = 0;\nlet timerInterval;\nlet elapsedTime = 0;\nlet startTime;\nlet currentGameSessionId = null;\nconst gameData = {\n  holes: {},\n  loopScores: []\n};\nexport function updateScoreDisplay() {\n  const scoreDisplay = document.getElementById('score-value');\n  if (score < 1000) {\n    scoreDisplay.textContent = score;\n  } else {\n    scoreDisplay.textContent = score.toLocaleString('en-US', {\n      minimumIntegerDigits: 4,\n      useGrouping: true\n    });\n  }\n}\nexport function resetScoreDisplay() {\n  score = 0;\n  updateScoreDisplay();\n}\nexport function resetLoopDisplay() {\n  const loopNumberInput = document.getElementById('loop-number-input');\n  const loopScoreInput = document.getElementById('loop-score-input');\n  loopNumberInput.value = 1;\n  loopScoreInput.value = 0;\n}\nexport function resetHoleDisplay() {\n  const loopNumberInput = document.getElementById('loop-number-input');\n  const loopScoreInput = document.getElementById('loop-score-input');\n  loopNumberInput.value = 1;\n  loopScoreInput.value = 0;\n}\nexport function stopTimeDisplay() {\n  clearInterval(timerInterval);\n}\nexport function resetTimeDisplay() {\n  clearInterval(timerInterval);\n  elapsedTime = 0;\n  updateTimeDisplay(0, 0, 0);\n}\nexport function updateTimeDisplay(hours, minutes, seconds) {\n  const timeDisplay = document.getElementById('time-value');\n  hours = hours < 10 ? \"0\" + hours : hours;\n  minutes = minutes < 10 ? \"0\" + minutes : minutes;\n  seconds = seconds < 10 ? \"0\" + seconds : seconds;\n  timeDisplay.textContent = hours + \":\" + minutes + \":\" + seconds;\n}\nexport function startStopwatch() {\n  clearInterval(timerInterval);\n  startTime = Date.now() - elapsedTime;\n  function updateTimer() {\n    elapsedTime = Date.now() - startTime;\n    const hours = Math.floor(elapsedTime / (3600 * 1000));\n    const minutes = Math.floor(elapsedTime % (3600 * 1000) / (60 * 1000));\n    const seconds = Math.floor(elapsedTime % (60 * 1000) / 1000);\n    updateTimeDisplay(hours, minutes, seconds);\n  }\n  updateTimer();\n  timerInterval = setInterval(updateTimer, 1000);\n}\nexport function updateBallsValueDisplay(ballValue) {\n  const ballsValueDisplay = document.getElementById('balls-input');\n  ballsValueDisplay.value = ballValue;\n}\nexport function animateScoreIncrement(amount) {\n  let targetScore = score + amount;\n  let incrementSpeed = 0.1;\n  function increment() {\n    if (score < targetScore) {\n      score++;\n      updateScoreDisplay();\n      setTimeout(increment, incrementSpeed);\n    } else {\n      score = targetScore;\n      updateScoreDisplay();\n    }\n  }\n  increment();\n}\nexport function addHoleScore(holeNumber, holeScore) {\n  gameData.holes[holeNumber] = holeScore;\n}\nexport function getCSRFToken() {\n  const cookieValue = document.cookie.match('(^|;)\\\\s*csrftoken\\\\s*=\\\\s*([^;]+)');\n  return cookieValue ? cookieValue.pop() : '';\n}\nfunction setCSRFToken() {\n  const csrfToken = getCSRFToken();\n  if (!csrfToken) {\n    fetch('/api/csrf/', {\n      method: 'GET',\n      credentials: 'include'\n    }).then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n      throw new Error('Failed to fetch CSRF token');\n    }).then(data => {\n      document.cookie = `csrftoken=${data.csrfToken}; path=/`;\n    }).catch(error => {\n      console.error('Error setting CSRF token:', error);\n    });\n  }\n}\nexport function getPlayerData(playerId) {\n  let baseUrl = window.location.origin;\n  baseUrl = baseUrl.replace('3000', '8000');\n  const apiUrl = `${baseUrl}/api/player/${playerId}/`;\n  const csrfToken = getCSRFToken();\n  return fetch(apiUrl, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      'X-CSRFToken': csrfToken\n    }\n  }).then(response => {\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return response.json();\n  }).then(data => {\n    console.log('Fetched player data:', data);\n    return data;\n  }).catch(error => {\n    console.error('Error fetching player data:', error);\n    throw error;\n  });\n}\nexport function createNewGameSession() {\n  console.log('Creating new game session...');\n  setCSRFToken();\n  let baseUrl = window.location.origin;\n  baseUrl = baseUrl.replace('3000', '8000');\n  const apiUrl = `${baseUrl}/api/game-session/create/`;\n  const payload = {\n    game: 1,\n    player: 2,\n    // Ensure this player ID exists\n    arcade: 1 // Ensure this arcade ID exists\n  };\n  const csrfToken = getCSRFToken();\n  return fetch(apiUrl, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'X-CSRFToken': csrfToken\n    },\n    body: JSON.stringify(payload)\n  }).then(response => {\n    if (!response.ok) {\n      return response.json().then(err => {\n        throw err;\n      });\n    }\n    return response.json();\n  }).then(data => {\n    console.log('Game session created:', data);\n    if (data.game_session_id) {\n      currentGameSessionId = data.game_session_id;\n      console.log('Current game session ID:', currentGameSessionId);\n      return currentGameSessionId;\n    } else {\n      console.error('Game session creation response does not contain an ID.');\n      throw new Error('Game session creation response does not contain an ID.');\n    }\n  }).catch(error => {\n    console.error('Error creating game session:', error);\n    throw error;\n  });\n}\nexport function updateGameSession(loopNumber, holeNumber, holeScore) {\n  if (holeScore === undefined) {\n    console.error('Hole score is undefined');\n    return;\n  }\n  console.log(`Updating game session ID: ${currentGameSessionId}, loop: ${loopNumber}, hole: ${holeNumber} with score: ${holeScore}`);\n  let baseUrl = window.location.origin;\n  baseUrl = baseUrl.replace('3000', '8000');\n  const apiUrl = `${baseUrl}/api/game-session/${currentGameSessionId}/loop/${loopNumber}/hole/${holeNumber}/update-score/`;\n  const payload = {\n    hole_score: holeScore\n  };\n  const csrfToken = getCSRFToken();\n  fetch(apiUrl, {\n    method: 'PATCH',\n    headers: {\n      'Content-Type': 'application/json',\n      'X-CSRFToken': csrfToken\n    },\n    body: JSON.stringify(payload)\n  }).then(response => {\n    if (!response.ok) {\n      return response.json().then(err => {\n        throw err;\n      });\n    }\n    return response.json();\n  }).then(data => {\n    console.log('Hole score updated:', data);\n  }).catch(error => {\n    console.error('Error updating hole score:', error);\n  });\n}","map":{"version":3,"names":["score","timerInterval","elapsedTime","startTime","currentGameSessionId","gameData","holes","loopScores","updateScoreDisplay","scoreDisplay","document","getElementById","textContent","toLocaleString","minimumIntegerDigits","useGrouping","resetScoreDisplay","resetLoopDisplay","loopNumberInput","loopScoreInput","value","resetHoleDisplay","stopTimeDisplay","clearInterval","resetTimeDisplay","updateTimeDisplay","hours","minutes","seconds","timeDisplay","startStopwatch","Date","now","updateTimer","Math","floor","setInterval","updateBallsValueDisplay","ballValue","ballsValueDisplay","animateScoreIncrement","amount","targetScore","incrementSpeed","increment","setTimeout","addHoleScore","holeNumber","holeScore","getCSRFToken","cookieValue","cookie","match","pop","setCSRFToken","csrfToken","fetch","method","credentials","then","response","ok","json","Error","data","catch","error","console","getPlayerData","playerId","baseUrl","window","location","origin","replace","apiUrl","headers","log","createNewGameSession","payload","game","player","arcade","body","JSON","stringify","err","game_session_id","updateGameSession","loopNumber","undefined","hole_score"],"sources":["/Users/roddy/Desktop/icb-app/frontend/src/utils/api.js"],"sourcesContent":["let score = 0;\nlet timerInterval;\nlet elapsedTime = 0;\nlet startTime;\nlet currentGameSessionId = null;\n\nconst gameData = {\n    holes: {},\n    loopScores: []\n};\n\nexport function updateScoreDisplay() {\n    const scoreDisplay = document.getElementById('score-value');\n    if (score < 1000) {\n        scoreDisplay.textContent = score;\n    } else {\n        scoreDisplay.textContent = score.toLocaleString('en-US', { minimumIntegerDigits: 4, useGrouping: true });\n    }\n}\n\nexport function resetScoreDisplay() {\n    score = 0;\n    updateScoreDisplay();\n}\n\nexport function resetLoopDisplay() {\n    const loopNumberInput = document.getElementById('loop-number-input');\n    const loopScoreInput = document.getElementById('loop-score-input');\n    loopNumberInput.value = 1;\n    loopScoreInput.value = 0;\n}\n\nexport function resetHoleDisplay() {\n    const loopNumberInput = document.getElementById('loop-number-input');\n    const loopScoreInput = document.getElementById('loop-score-input');\n    loopNumberInput.value = 1;\n    loopScoreInput.value = 0;\n}\nexport function stopTimeDisplay() {\n    clearInterval(timerInterval);\n}\n\nexport function resetTimeDisplay() {\n    clearInterval(timerInterval);\n    elapsedTime = 0;\n    updateTimeDisplay(0, 0, 0);\n}\n\nexport function updateTimeDisplay(hours, minutes, seconds) {\n    const timeDisplay = document.getElementById('time-value');\n    hours = hours < 10 ? \"0\" + hours : hours;\n    minutes = minutes < 10 ? \"0\" + minutes : minutes;\n    seconds = seconds < 10 ? \"0\" + seconds : seconds;\n    timeDisplay.textContent = hours + \":\" + minutes + \":\" + seconds;\n}\n\nexport function startStopwatch() {\n    clearInterval(timerInterval);\n    startTime = Date.now() - elapsedTime;\n\n    function updateTimer() {\n        elapsedTime = Date.now() - startTime;\n        const hours = Math.floor(elapsedTime / (3600 * 1000));\n        const minutes = Math.floor((elapsedTime % (3600 * 1000)) / (60 * 1000));\n        const seconds = Math.floor((elapsedTime % (60 * 1000)) / 1000);\n        updateTimeDisplay(hours, minutes, seconds);\n    }\n\n    updateTimer();\n    timerInterval = setInterval(updateTimer, 1000);\n}\n\nexport function updateBallsValueDisplay(ballValue) {\n    const ballsValueDisplay = document.getElementById('balls-input');\n    ballsValueDisplay.value = ballValue;\n}\n\nexport function animateScoreIncrement(amount) {\n    let targetScore = score + amount;\n    let incrementSpeed = 0.1;\n\n    function increment() {\n        if (score < targetScore) {\n            score++;\n            updateScoreDisplay();\n            setTimeout(increment, incrementSpeed);\n        } else {\n            score = targetScore;\n            updateScoreDisplay();\n        }\n    }\n\n    increment();\n}\n\nexport function addHoleScore(holeNumber, holeScore) {\n    gameData.holes[holeNumber] = holeScore;\n}\n\nexport function getCSRFToken() {\n    const cookieValue = document.cookie.match('(^|;)\\\\s*csrftoken\\\\s*=\\\\s*([^;]+)');\n    return cookieValue ? cookieValue.pop() : '';\n}\n\nfunction setCSRFToken() {\n    const csrfToken = getCSRFToken();\n    if (!csrfToken) {\n        fetch('/api/csrf/', {\n            method: 'GET',\n            credentials: 'include',\n        }).then(response => {\n            if (response.ok) {\n                return response.json();\n            }\n            throw new Error('Failed to fetch CSRF token');\n        }).then(data => {\n            document.cookie = `csrftoken=${data.csrfToken}; path=/`;\n        }).catch(error => {\n            console.error('Error setting CSRF token:', error);\n        });\n    }\n}\n\nexport function getPlayerData(playerId) {\n    let baseUrl = window.location.origin;\n    baseUrl = baseUrl.replace('3000', '8000');\n    const apiUrl = `${baseUrl}/api/player/${playerId}/`;\n\n    const csrfToken = getCSRFToken();\n\n    return fetch(apiUrl, {\n        method: 'GET',\n        headers: {\n            'Content-Type': 'application/json',\n            'X-CSRFToken': csrfToken,\n        },\n    })\n    .then(response => {\n        if (!response.ok) {\n            throw new Error('Network response was not ok');\n        }\n        return response.json();\n    })\n    .then(data => {\n        console.log('Fetched player data:', data);\n        return data;\n    })\n    .catch(error => {\n        console.error('Error fetching player data:', error);\n        throw error;\n    });\n}\n\nexport function createNewGameSession() {\n    console.log('Creating new game session...');\n    setCSRFToken();\n    let baseUrl = window.location.origin;\n    baseUrl = baseUrl.replace('3000', '8000');\n    const apiUrl = `${baseUrl}/api/game-session/create/`;\n\n    const payload = {\n        game: 1,\n        player: 2, // Ensure this player ID exists\n        arcade: 1  // Ensure this arcade ID exists\n    };\n\n    const csrfToken = getCSRFToken();\n\n    return fetch(apiUrl, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'X-CSRFToken': csrfToken,\n        },\n        body: JSON.stringify(payload),\n    })\n    .then(response => {\n        if (!response.ok) {\n            return response.json().then(err => { throw err; });\n        }\n        return response.json();\n    })\n    .then(data => {\n        console.log('Game session created:', data);\n\n        if (data.game_session_id) {\n            currentGameSessionId = data.game_session_id;\n            console.log('Current game session ID:', currentGameSessionId);\n            return currentGameSessionId;\n        } else {\n            console.error('Game session creation response does not contain an ID.');\n            throw new Error('Game session creation response does not contain an ID.');\n        }\n    })\n    .catch(error => {\n        console.error('Error creating game session:', error);\n        throw error;\n    });\n}\n\nexport function updateGameSession(loopNumber, holeNumber, holeScore) {\n    if (holeScore === undefined) {\n        console.error('Hole score is undefined');\n        return;\n    }\n\n    console.log(`Updating game session ID: ${currentGameSessionId}, loop: ${loopNumber}, hole: ${holeNumber} with score: ${holeScore}`);\n    \n    let baseUrl = window.location.origin;\n    baseUrl = baseUrl.replace('3000', '8000');\n    const apiUrl = `${baseUrl}/api/game-session/${currentGameSessionId}/loop/${loopNumber}/hole/${holeNumber}/update-score/`;\n\n    const payload = {\n        hole_score: holeScore\n    };\n\n    const csrfToken = getCSRFToken();\n\n    fetch(apiUrl, {\n        method: 'PATCH',\n        headers: {\n            'Content-Type': 'application/json',\n            'X-CSRFToken': csrfToken,\n        },\n        body: JSON.stringify(payload),\n    })\n    .then(response => {\n        if (!response.ok) {\n            return response.json().then(err => { throw err; });\n        }\n        return response.json();\n    })\n    .then(data => {\n        console.log('Hole score updated:', data);\n    })\n    .catch(error => {\n        console.error('Error updating hole score:', error);\n    });\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}