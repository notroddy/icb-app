{"ast":null,"code":"// Variables\nlet score = 0;\nlet timerInterval;\nlet elapsedTime = 0;\nlet startTime;\nlet currentGameSessionId = null;\n\n// Data Structure to Track Scores\nconst gameData = {\n  holes: {},\n  // Track scores for each hole within the current loop\n  loopScores: [] // Store completed loop scores and details\n};\n\n// Functions\nfunction updateScoreDisplay() {\n  const scoreDisplay = document.getElementById('score-value');\n  if (score < 1000) {\n    scoreDisplay.textContent = score;\n  } else {\n    scoreDisplay.textContent = score.toLocaleString('en-US', {\n      minimumIntegerDigits: 4,\n      useGrouping: true\n    });\n  }\n}\nfunction formatNumberWithCommas(number) {\n  return number.toLocaleString('en-US');\n}\nfunction resetScoreDisplay() {\n  score = 0;\n  updateScoreDisplay();\n}\nfunction stopTimeDisplay() {\n  clearInterval(timerInterval);\n}\nfunction resetTimeDisplay() {\n  clearInterval(timerInterval);\n  elapsedTime = 0;\n  updateTimeDisplay(0, 0, 0); // Initialize the time display to 00:00:00\n}\nfunction updateTimeDisplay(hours, minutes, seconds) {\n  const timeDisplay = document.getElementById('time-value');\n  hours = hours < 10 ? \"0\" + hours : hours;\n  minutes = minutes < 10 ? \"0\" + minutes : minutes;\n  seconds = seconds < 10 ? \"0\" + seconds : seconds;\n  timeDisplay.textContent = hours + \":\" + minutes + \":\" + seconds;\n}\nfunction startStopwatch() {\n  clearInterval(timerInterval); // Clear any existing interval\n  startTime = Date.now() - elapsedTime; // Set startTime to account for elapsed time\n\n  function updateTimer() {\n    elapsedTime = Date.now() - startTime; // Update elapsedTime\n    const hours = Math.floor(elapsedTime / (3600 * 1000));\n    const minutes = Math.floor(elapsedTime % (3600 * 1000) / (60 * 1000));\n    const seconds = Math.floor(elapsedTime % (60 * 1000) / 1000);\n    updateTimeDisplay(hours, minutes, seconds);\n  }\n  updateTimer(); // Update timer immediately\n  timerInterval = setInterval(updateTimer, 1000); // Update every second\n}\nfunction updateBallsValueDisplay(ballValue) {\n  const ballsValueDisplay = document.getElementById('balls-input');\n  ballsValueDisplay.value = ballValue;\n}\nfunction animateScoreIncrement(amount) {\n  let targetScore = score + amount;\n  let incrementSpeed = 0.1; // Increment speed in milliseconds\n\n  function increment() {\n    if (score < targetScore) {\n      score++;\n      updateScoreDisplay();\n      setTimeout(increment, incrementSpeed);\n    } else {\n      score = targetScore; // Ensure the score matches the target precisely\n      updateScoreDisplay();\n    }\n  }\n  increment();\n}\nfunction addHoleScore(holeNumber, holeScore) {\n  gameData.holes[holeNumber] = holeScore;\n}\n// Function to get the CSRF token from the cookies\nfunction getCSRFToken() {\n  const cookieValue = document.cookie.match('(^|;)\\\\s*csrftoken\\\\s*=\\\\s*([^;]+)');\n  return cookieValue ? cookieValue.pop() : '';\n}\n\n// Function to create a new game session\nfunction createNewGameSession() {\n  // Dynamically set the API base URL\n  const baseUrl = window.location.origin; // Will give you the correct domain (http://127.0.0.1:8000 or https://yourdomain.com)\n  // change the port of the baseUrl to 8000\n\n  const apiUrl = `${baseUrl}/api/game-session/create/`; // Append your endpoint to the base URL\n\n  const payload = {\n    game: 1,\n    // Replace with your actual game ID\n    player: 1,\n    // Replace with your actual player ID\n    arcade: 1 // Replace with your actual arcade ID\n  };\n  const csrfToken = getCSRFToken(); // Get the CSRF token from the cookies\n\n  // Send the POST request to create the game session\n  fetch(apiUrl, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'X-CSRFToken': csrfToken // Include the CSRF token in the headers\n    },\n    body: JSON.stringify(payload)\n  }).then(response => response.json()).then(data => {\n    console.log('Game session created:', data);\n    if (data.game_session_id) {\n      // Store the session ID in the global variable\n      currentGameSessionId = data.game_session_id;\n    } else {\n      console.error('Game session creation response does not contain an ID.');\n    }\n  }).catch(error => {\n    console.error('Error creating game session:', error);\n  });\n}\n\n// Function to update the hole scores for a game session\nfunction updateGameSession(holeNumber, loopNumber, holeScore) {\n  if (!currentGameSessionId) {\n    console.error('Game session ID is not available. Cannot update hole scores.');\n    return;\n  }\n\n  // Dynamically set the API base URL\n  const baseUrl = window.location.origin; // Will give you the correct domain\n  const apiUrl = `${baseUrl}/api/game-session/${currentGameSessionId}/loop/${loopNumber}/hole/${holeNumber}/update-score/`; // Append your endpoint to the base URL\n\n  const payload = {\n    hole_score: holeScore\n  };\n  const csrfToken = getCSRFToken(); // Get the CSRF token from the cookies\n\n  // Send the PATCH request to update the hole score\n  fetch(apiUrl, {\n    method: 'PATCH',\n    headers: {\n      'Content-Type': 'application/json',\n      'X-CSRFToken': csrfToken // Include the CSRF token in the headers\n    },\n    body: JSON.stringify(payload)\n  }).then(response => response.json()).then(data => {\n    console.log('Hole score updated:', data);\n  }).catch(error => {\n    console.error('Error updating hole score:', error);\n  });\n}\n\n// Event Listeners\ndocument.addEventListener('DOMContentLoaded', () => {\n  updateTimeDisplay(0, 0, 0, 0); // Initialize the time display to 00:00:00.00\n  updateScoreDisplay(); // Initialize the score display to 0\n\n  document.getElementById('start-game-btn').addEventListener('click', () => {\n    console.log('Start Game button clicked');\n    stopTimeDisplay();\n    resetTimeDisplay();\n    resetScoreDisplay();\n    createNewGameSession(); // Create a new game session when the page loads\n    startStopwatch(); // Start stopwatch\n  });\n  document.getElementById('end-game-btn').addEventListener('click', () => {\n    console.log('End Game button clicked');\n    stopTimeDisplay();\n    resetTimeDisplay();\n    resetScoreDisplay();\n  });\n  document.getElementById('reset-game-btn').addEventListener('click', () => {\n    stopTimeDisplay();\n    resetTimeDisplay();\n    resetScoreDisplay();\n    createNewGameSession();\n    startStopwatch(); // Start stopwatch\n  });\n  document.getElementById('loop-score-input').addEventListener('keypress', e => {\n    if (e.key === 'Enter') {\n      const inputValue = parseInt(e.target.value, 10);\n      if (!isNaN(inputValue)) {\n        animateScoreIncrement(inputValue);\n        e.target.value = ''; // Clear the input field\n      }\n    }\n  });\n  document.getElementById('hole-score-input').addEventListener('keypress', e => {\n    if (e.key === 'Enter') {\n      const holeScore = parseInt(e.target.value, 10); // Get the hole score value\n\n      if (!isNaN(holeScore)) {\n        const holeNumberInput = document.getElementById('hole-number-input');\n        const loopNumberInput = document.getElementById('loop-number-input');\n        const loopScoreInput = document.getElementById('loop-score-input');\n        let loopScore = parseInt(loopScoreInput.value, 10) || 0;\n        loopScore += holeScore;\n        let holeNumber = parseInt(holeNumberInput.value, 10) || 1;\n        let loopNumber = parseInt(loopNumberInput.value, 10) || 1;\n        updateGameSession(holeNumber, loopNumber, holeScore); // Update the game session with the hole score\n\n        console.log(`Hole ${holeNumber} score: ${holeScore}`);\n        loopScoreInput.value = loopScore;\n        console.log(`Updated Loop Score: ${loopScore}`);\n        addHoleScore(holeNumber, holeScore);\n        e.target.value = '';\n        if (holeNumber === 10) {\n          score += loopScore;\n          updateScoreDisplay();\n          gameData.loopScores.push({\n            loop: loopNumber,\n            score: loopScore,\n            holes: {\n              ...gameData.holes\n            }\n          });\n          console.log(`Loop ${loopNumber} completed.`);\n          console.log(`Hole Scores:`, gameData.holes);\n          console.log(`Total Loop Score: ${loopScore}`);\n          gameData.holes = {};\n          loopScoreInput.value = '0';\n          holeNumber = 1;\n          loopNumber += 1;\n          loopNumberInput.value = loopNumber;\n        } else {\n          holeNumber += 1;\n        }\n        holeNumberInput.value = holeNumber;\n      }\n    }\n  });\n});","map":{"version":3,"names":["score","timerInterval","elapsedTime","startTime","currentGameSessionId","gameData","holes","loopScores","updateScoreDisplay","scoreDisplay","document","getElementById","textContent","toLocaleString","minimumIntegerDigits","useGrouping","formatNumberWithCommas","number","resetScoreDisplay","stopTimeDisplay","clearInterval","resetTimeDisplay","updateTimeDisplay","hours","minutes","seconds","timeDisplay","startStopwatch","Date","now","updateTimer","Math","floor","setInterval","updateBallsValueDisplay","ballValue","ballsValueDisplay","value","animateScoreIncrement","amount","targetScore","incrementSpeed","increment","setTimeout","addHoleScore","holeNumber","holeScore","getCSRFToken","cookieValue","cookie","match","pop","createNewGameSession","baseUrl","window","location","origin","apiUrl","payload","game","player","arcade","csrfToken","fetch","method","headers","body","JSON","stringify","then","response","json","data","console","log","game_session_id","error","catch","updateGameSession","loopNumber","hole_score","addEventListener","e","key","inputValue","parseInt","target","isNaN","holeNumberInput","loopNumberInput","loopScoreInput","loopScore","push","loop"],"sources":["/app/src/utils/api.js"],"sourcesContent":["// Variables\nlet score = 0;\nlet timerInterval;\nlet elapsedTime = 0;\nlet startTime;\nlet currentGameSessionId = null;\n\n// Data Structure to Track Scores\nconst gameData = {\n    holes: {}, // Track scores for each hole within the current loop\n    loopScores: [] // Store completed loop scores and details\n};\n\n// Functions\nfunction updateScoreDisplay() {\n    const scoreDisplay = document.getElementById('score-value');\n    if (score < 1000) {\n        scoreDisplay.textContent = score;\n    } else {\n        scoreDisplay.textContent = score.toLocaleString('en-US', { minimumIntegerDigits: 4, useGrouping: true });\n    }\n}\n\nfunction formatNumberWithCommas(number) {\n    return number.toLocaleString('en-US');\n}\n\n\n\nfunction resetScoreDisplay() {\n    score = 0;\n    updateScoreDisplay();\n}\n\nfunction stopTimeDisplay() {\n    clearInterval(timerInterval);\n}\n\nfunction resetTimeDisplay() {\n    clearInterval(timerInterval);\n    elapsedTime = 0;\n    updateTimeDisplay(0, 0, 0); // Initialize the time display to 00:00:00\n}\n\nfunction updateTimeDisplay(hours, minutes, seconds) {\n    const timeDisplay = document.getElementById('time-value');\n    hours = hours < 10 ? \"0\" + hours : hours;\n    minutes = minutes < 10 ? \"0\" + minutes : minutes;\n    seconds = seconds < 10 ? \"0\" + seconds : seconds;\n    timeDisplay.textContent = hours + \":\" + minutes + \":\" + seconds;\n}\n\nfunction startStopwatch() {\n    clearInterval(timerInterval); // Clear any existing interval\n    startTime = Date.now() - elapsedTime; // Set startTime to account for elapsed time\n\n    function updateTimer() {\n        elapsedTime = Date.now() - startTime; // Update elapsedTime\n        const hours = Math.floor(elapsedTime / (3600 * 1000));\n        const minutes = Math.floor((elapsedTime % (3600 * 1000)) / (60 * 1000));\n        const seconds = Math.floor((elapsedTime % (60 * 1000)) / 1000);\n        updateTimeDisplay(hours, minutes, seconds);\n    }\n\n    updateTimer(); // Update timer immediately\n    timerInterval = setInterval(updateTimer, 1000); // Update every second\n}\n\nfunction updateBallsValueDisplay(ballValue) {\n    const ballsValueDisplay = document.getElementById('balls-input');\n    ballsValueDisplay.value = ballValue;\n}\n\nfunction animateScoreIncrement(amount) {\n    let targetScore = score + amount;\n    let incrementSpeed = 0.1; // Increment speed in milliseconds\n\n    function increment() {\n        if (score < targetScore) {\n            score++;\n            updateScoreDisplay();\n            setTimeout(increment, incrementSpeed);\n        } else {\n            score = targetScore; // Ensure the score matches the target precisely\n            updateScoreDisplay();\n        }\n    }\n\n    increment();\n}\n\nfunction addHoleScore(holeNumber, holeScore) {\n    gameData.holes[holeNumber] = holeScore;\n}\n// Function to get the CSRF token from the cookies\nfunction getCSRFToken() {\n    const cookieValue = document.cookie.match('(^|;)\\\\s*csrftoken\\\\s*=\\\\s*([^;]+)');\n    return cookieValue ? cookieValue.pop() : '';\n}\n\n// Function to create a new game session\nfunction createNewGameSession() {\n    // Dynamically set the API base URL\n    const baseUrl = window.location.origin; // Will give you the correct domain (http://127.0.0.1:8000 or https://yourdomain.com)\n    // change the port of the baseUrl to 8000\n    \n    const apiUrl = `${baseUrl}/api/game-session/create/`; // Append your endpoint to the base URL\n\n    const payload = {\n        game: 1, // Replace with your actual game ID\n        player: 1, // Replace with your actual player ID\n        arcade: 1 // Replace with your actual arcade ID\n    };\n\n    const csrfToken = getCSRFToken(); // Get the CSRF token from the cookies\n\n    // Send the POST request to create the game session\n    fetch(apiUrl, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'X-CSRFToken': csrfToken, // Include the CSRF token in the headers\n        },\n        body: JSON.stringify(payload),\n    })\n    .then(response => response.json())\n    .then(data => {\n        console.log('Game session created:', data);\n\n        if (data.game_session_id) {\n            // Store the session ID in the global variable\n            currentGameSessionId = data.game_session_id;\n        } else {\n            console.error('Game session creation response does not contain an ID.');\n        }\n    })\n    .catch(error => {\n        console.error('Error creating game session:', error);\n    });\n}\n\n// Function to update the hole scores for a game session\nfunction updateGameSession(holeNumber, loopNumber, holeScore) {\n    if (!currentGameSessionId) {\n        console.error('Game session ID is not available. Cannot update hole scores.');\n        return;\n    }\n\n    // Dynamically set the API base URL\n    const baseUrl = window.location.origin; // Will give you the correct domain\n    const apiUrl = `${baseUrl}/api/game-session/${currentGameSessionId}/loop/${loopNumber}/hole/${holeNumber}/update-score/`; // Append your endpoint to the base URL\n\n    const payload = {\n        hole_score: holeScore\n    };\n\n    const csrfToken = getCSRFToken(); // Get the CSRF token from the cookies\n\n    // Send the PATCH request to update the hole score\n    fetch(apiUrl, {\n        method: 'PATCH',\n        headers: {\n            'Content-Type': 'application/json',\n            'X-CSRFToken': csrfToken, // Include the CSRF token in the headers\n        },\n        body: JSON.stringify(payload),\n    })\n    .then(response => response.json())\n    .then(data => {\n        console.log('Hole score updated:', data);\n    })\n    .catch(error => {\n        console.error('Error updating hole score:', error);\n    });\n}\n\n// Event Listeners\ndocument.addEventListener('DOMContentLoaded', () => {\n\n    updateTimeDisplay(0, 0, 0, 0); // Initialize the time display to 00:00:00.00\n    updateScoreDisplay(); // Initialize the score display to 0\n\n    document.getElementById('start-game-btn').addEventListener('click', () => {\n        console.log('Start Game button clicked');\n        stopTimeDisplay();\n        resetTimeDisplay();\n        resetScoreDisplay();\n        createNewGameSession(); // Create a new game session when the page loads\n        startStopwatch(); // Start stopwatch\n    });\n\n    document.getElementById('end-game-btn').addEventListener('click', () => {\n        console.log('End Game button clicked');\n        stopTimeDisplay();\n        resetTimeDisplay();\n        resetScoreDisplay();\n    });\n\n    document.getElementById('reset-game-btn').addEventListener('click', () => {\n        stopTimeDisplay();\n        resetTimeDisplay();\n        resetScoreDisplay();\n        createNewGameSession(); \n        startStopwatch(); // Start stopwatch\n        });\n\n  \n\n    document.getElementById('loop-score-input').addEventListener('keypress', (e) => {\n        if (e.key === 'Enter') {\n            const inputValue = parseInt(e.target.value, 10);\n            if (!isNaN(inputValue)) {\n                animateScoreIncrement(inputValue);\n                e.target.value = ''; // Clear the input field\n            }\n        }\n    });\n\n    document.getElementById('hole-score-input').addEventListener('keypress', (e) => {\n        if (e.key === 'Enter') {\n            const holeScore = parseInt(e.target.value, 10); // Get the hole score value\n\n            if (!isNaN(holeScore)) {\n                const holeNumberInput = document.getElementById('hole-number-input');\n                const loopNumberInput = document.getElementById('loop-number-input');\n                const loopScoreInput = document.getElementById('loop-score-input');\n\n                let loopScore = parseInt(loopScoreInput.value, 10) || 0;\n                loopScore += holeScore;\n\n                let holeNumber = parseInt(holeNumberInput.value, 10) || 1;\n                let loopNumber = parseInt(loopNumberInput.value, 10) || 1;\n\n                updateGameSession(holeNumber, loopNumber, holeScore); // Update the game session with the hole score\n\n                console.log(`Hole ${holeNumber} score: ${holeScore}`);\n                loopScoreInput.value = loopScore;\n                console.log(`Updated Loop Score: ${loopScore}`);\n\n                addHoleScore(holeNumber, holeScore);\n\n                e.target.value = '';\n\n                if (holeNumber === 10) {\n                    score += loopScore;\n                    updateScoreDisplay();\n\n                    gameData.loopScores.push({ loop: loopNumber, score: loopScore, holes: { ...gameData.holes } });\n                    console.log(`Loop ${loopNumber} completed.`);\n                    console.log(`Hole Scores:`, gameData.holes);\n                    console.log(`Total Loop Score: ${loopScore}`);\n\n                    gameData.holes = {};\n                    loopScoreInput.value = '0';\n                    holeNumber = 1;\n                    loopNumber += 1;\n                    loopNumberInput.value = loopNumber;\n                } else {\n                    holeNumber += 1;\n                }\n                holeNumberInput.value = holeNumber;\n            }\n        }\n    });\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}